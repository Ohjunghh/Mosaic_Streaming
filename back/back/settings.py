"""
Django settings for back project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-mv)$g-sm3a423cvk_fsg&rq@3z#dld9)5kbeg!*it1v8-3ap2f"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['*']  # 모든 호스트 허용 (개발 환경에서만 사용)


# Application definition

INSTALLED_APPS = [
    'daphne',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework', # Django REST Framework (DRF) 설정 추가
    'rest_framework_simplejwt',
    'corsheaders', # CORS 설정
    'example_app',
    'webcam',
    'webcam_test',
    'chat',
    'channels',
    'users',
]

ASGI_APPLICATION = 'back.asgi.application'

CHANNEL_LAYERS = {
     "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)], #포트 6379에서 Redis 서버
        },
    },
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    #"django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

SECURE_COOKIES = True
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
SECURE_CROSS_ORIGIN_EMBEDDER_POLICY = 'require-corp'

# 웹 브라우저는 보안을 위해 기본적으로 Cross-Origin 요청을 차단
# 프론트엔드에서의 요청을 허용하기 위해 화이트리스트에 추가
# CORS_ORIGIN_WHITELIST = [
#     'http://127.0.0.1:8000','http://localhost:3000','http://172.24.240.191:1935',
# ]

# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000','http://172.24.240.191','http://10.0.2.2:8088',
# ]

from corsheaders.defaults import default_headers
CORS_ALLOW_HEADERS = list(default_headers) + [
    'content-disposition',
    'content-length',
]


CORS_ALLOW_ALL_ORIGINS = True  # 모든 도메인에서의 요청 허용
#CORS_ORIGIN_ALLOW_ALL = True #모든 도메인에서의 요청을 허용
#CORS_ALLOWED_CREDENTIALS = True #자격 증명을 허용
CORS_ALLOWED_CREDENTIALS = False ## 자격 증명 필요 없음 (쿠키나 세션이 아닌 JWT 토큰을 사용)
ROOT_URLCONF = "back.urls"

import os
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "back.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
        "TEST": {
            "NAME": BASE_DIR / "db.sqlite3",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        #'rest_framework.authentication.SessionAuthentication', # 세션 기반의 인증을 사용합니다. 세션 인증은 사용자가 로그인할 때 세션을 생성하고 이를 기반으로 사용자를 식별
        #'rest_framework.authentication.BasicAuthentication', #HTTP Basic 인증을 사용합니다. 이는 사용자가 간단한 유저네임과 비밀번호를 사용하여 인증하는 기본적인 방식
        'rest_framework_simplejwt.authentication.JWTAuthentication', # JWT 인증만 사용
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', #인증된 사용자만 API에 접근할 수 있습니다. 즉, 로그인한 사용자에게만 권한이 부여
    ]
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15), #액세스 토큰의 유효 시간
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1), #리프레시 토큰의 유효 시간
    'AUTH_HEADER_TYPES': ('Bearer',), # 클라이언트가 헤더에 'Bearer'로 토큰을 보내야 함
}

MEDIA_URL = '/media/' # 저장된 파일에 접근할 수 있는 URL
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') #파일을 저장할 디렉토리의 절대 경로

AUTH_USER_MODEL = 'users.CustomUser'
